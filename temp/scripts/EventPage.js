/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/background/eventPage.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/background/eventPage.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n\n\n//background script, event mode\n//message passed between background - defaultpage - iframes\n// import database from \"../assets/scripts/modules/Database\";\n// import dbOffline from \"../assets/scripts/modules/Database Offline\";\n// import { callbackify } from \"util\";\n// import TaxAndAssessQuery from \"./searchTax\";\nvar db = new Database(); // var dbo = new dbOffline();\n\nvar $fx = L$(); // const newTaxYear = true; //beginning of new year, MLS tax db has not been updated, still use last year's assess. set newTaxYear to false\n// const d = new Date(); // 当前日期\n// let taxYear = d.getFullYear(); // 当前年份\n\nvar taxYear = $fx.currentTaxYear(); // const $today = d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate();\n\nvar $today = $fx.getToday_yyyymmdd();\nvar chromeTabID; // taxYear = newTaxYear ? taxYear : taxYear - 1; // 纳税年份, 总是使用当前年份\n\nvar complexInfoSearchResult = null;\nvar mlsTable = [];\nvar assessInfo = null;\nvar queryTaxAndAssess = null;\nconsole.clear(); // 读取当前的tabID, 如果打开devTool, chrome有一个bug, 导致读取的tabID为空\n// 参见: https://stackoverflow.com/questions/59974414/chrome-tabs-query-returning-empty-tab-array\n// 更改代码\n\nchrome.windows.getCurrent(function (w) {\n  chrome.tabs.query({\n    active: true,\n    windowId: w.id\n  }, function (tabs) {\n    chromeTabID = tabs[0].id;\n    console.warn(\"当前Chrome的tabID是: \", chromeTabID);\n  });\n}); // chrome.tabs.query({ title: \"Paragon 5\" }, function (tabs) {\n//   chromeTabID = tabs[0].id;\n//   console.warn(\"background events page chromeTabID is: \", chromeTabID);\n// });\n\n(function () {\n  //console.log(\"Hello!-1\");\n  chrome.storage.local.set({\n    landValue: 0,\n    improvementValue: 0,\n    totalValue: 0,\n    curTabID: null,\n    taxYear: taxYear\n  });\n  chrome.browserAction.onClicked.addListener(function (activeTab) {\n    //open a link\n    // var newURL = \"http://idp.gvfv.clareitysecurity.net/idp/Authn/UserPassword\";\n    var newURL = \"https://gvfv.clareityiam.net/idp/login\";\n    chrome.tabs.create({\n      url: newURL\n    });\n  });\n  chrome.webNavigation.onCompleted.addListener(function (details) {//console.log(\"Completed!\");\n    //alert(\"Completed!\");\n  }, {\n    url: [{\n      hostContains: \".paragonrels.com\"\n    }]\n  }); //receive message from iframes, then transfer the message to Main Page content script\n\n  chrome.runtime.onMessage.addListener(\n  /*#__PURE__*/\n  function () {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(\n    /*#__PURE__*/\n    _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.mark(function _callee(request, sender, sendResponse) {\n      var resp, tabs, assess, _resp, complexID, requestFrom, complexInfo, exposureInfo, exposureID, listingInfo, listingID, showingInfo, showingID, spSummary, result, _result, subjectInfo, ajax_url, cmaInfo, _ajax_url, _ajax_url2, mlsNo, _listingInfo;\n\n      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default.a.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"onMessage.eventPage got a message from: \".concat(request.from, \"; todo: \").concat(request.todo, \" \")); //message from Warning iframe\n\n              if (request.todo == \"warningMessage\") {\n                //console.log(\"I got the warning message!\");\n                //pass the message to defaultpage(Main Home Page)\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"ignoreWarning\"\n                  });\n                });\n              } //message from Logout iframe\n\n\n              if (request.todo == \"logoutMessage\") {\n                //console.log(\"I got logout message!\");\n                //pass the message to defaultpage(Main Home Page)\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"logoutMLS\"\n                  });\n                });\n              }\n\n              if (request.todo == \"switchTab\") {\n                console.log(\"I got switch Tab message!\"); //pass the message to defaultpage(Main Home Page)\n\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"switchTab\",\n                    showResult: request.showResult,\n                    saveResult: request.saveResult\n                  });\n                });\n                sendResponse(\"switchTab done!!!\");\n              }\n\n              _context.t0 = request.todo;\n              _context.next = _context.t0 === \"taxSearch\" ? 7 : _context.t0 === \"saveTax\" ? 34 : 49;\n              break;\n\n            case 7:\n              // get request to search tax info of Property with PID saved to storage\n              // 查询请求来自前端paragon的Full Realtor Report 或者是 搜索结果列表 Spreadsheet Report\n              // 纳税年份, 应该使用当前年份.\n              // 测试async/await Class QueryTaxAndAssess\n              queryTaxAndAssess = new QueryTaxAndAssess(request, db);\n              _context.prev = 8;\n              _context.next = 11;\n              return queryTaxAndAssess.getAssessInfoPromise();\n\n            case 11:\n              assessInfo = _context.sent;\n              console.log(assessInfo); // 发送数据包\n\n              _context.prev = 13;\n              _context.next = 16;\n              return chrome.storage.promise.local.set(assessInfo);\n\n            case 16:\n              resp = _context.sent;\n              console.log(resp);\n              sendResponse(\">>>tax search has been processed in EventPage: \");\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t1 = _context[\"catch\"](13);\n              // 发送数据包错误处理\n              console.log(_context.t1);\n\n            case 24:\n              _context.next = 33;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t2 = _context[\"catch\"](8);\n              _context.next = 30;\n              return chrome.tabs.promise.query({\n                active: true,\n                windowId: null\n              });\n\n            case 30:\n              tabs = _context.sent;\n              chrome.tabs.sendMessage(tabs[0].id, {\n                todo: \"taxSearchFor\" + request.from\n              });\n              sendResponse(\">>>tax search has been sent to front end query service: \");\n\n            case 33:\n              return _context.abrupt(\"return\");\n\n            case 34:\n              //console.log(\">>>I got save tax info: \");\n              assess = request.taxData;\n              assess._id = assess.PID + \"-\" + assess.taxYear; // db.writeAssess(assess);\n\n              queryTaxAndAssess = new QueryTaxAndAssess(request, db);\n              _context.prev = 37;\n              _context.next = 40;\n              return queryTaxAndAssess.setAssessInfoPromise(assess);\n\n            case 40:\n              _resp = _context.sent;\n              console.log(_resp);\n              _context.next = 47;\n              break;\n\n            case 44:\n              _context.prev = 44;\n              _context.t3 = _context[\"catch\"](37);\n              console.log(_context.t3);\n\n            case 47:\n              sendResponse(assess);\n              return _context.abrupt(\"return\");\n\n            case 49:\n              if (request.todo == \"searchStrataPlanSummary\") {\n                //get request to search tax info of Property with PID saved to storage\n                //console.log(\">>>I got search StrataPlanSummary command!\");\n                chrome.storage.local.get([\"strataPlan\", \"complexNameForListingCount\"], function (result) {\n                  //check database, if assess exist, send it back\n                  //console.log(\">>>strataPlan is: \", result.strataPlan);\n                  var strataPlan = result.strataPlan;\n                  var complexName = result.complexNameForListingCount;\n\n                  if (!strataPlan || strataPlan == \"PLAN\" || strataPlan == \"PL\") {\n                    return;\n                  }\n\n                  var today = $fx.getToday();\n                  db.readStrataPlanSummary(strataPlan + \"-\" + today, function (strataPlanSummaryToday) {\n                    //console.log(\">>>read from , strataPlanSummary is: \", strataPlanSummaryToday)\n                    if (!strataPlanSummaryToday) {\n                      //other wise , send out tax research command:\n                      console.info(\"Chrome Tab ID is: \", chromeTabID);\n                      chrome.tabs.query({\n                        active: true,\n                        currentWindow: true\n                      }, function (tabs) {\n                        chrome.tabs.sendMessage(tabs[0].id, {\n                          todo: \"searchComplexListingCount\",\n                          showResult: true,\n                          saveResult: true,\n                          strataPlan: strataPlan,\n                          complexName: complexName\n                        });\n                      });\n                    }\n                  });\n                });\n                sendResponse(\">>>complex search has been processed in eventpage: \");\n              }\n\n              if (request.todo == \"searchComplexInfo\") {\n                complexID = request._id;\n                requestFrom = request.from;\n                delete request.from;\n                complexInfo = request;\n                db.readComplex(complexInfo, function (cInfo) {\n                  //console.log('>>>read the complex info from database:', complexInfo);\n                  if (cInfo) {\n                    if (cInfo.name.length > 0) {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.complexName = cInfo.name;\n                    } else {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.complexName = \"::\";\n                    }\n\n                    chrome.storage.local.set(cInfo, function () {\n                      console.log(\"complexInfo is: \", cInfo);\n                    });\n                  } else {\n                    //error for complexInfo\n                    console.log(\"Complex Name does not exist in Database\");\n                  }\n                });\n              }\n\n              if (request.todo == \"saveComplexInfo\") {\n                complexID = request._id;\n\n                if (request.complexName.trim().length > 0) {\n                  db.writeComplex(request);\n                }\n              }\n\n              if (request.todo == \"searchExposure\") {\n                requestFrom = request.from;\n                delete request.from;\n                exposureInfo = request;\n                db.readExposure(exposureInfo, function (cInfo) {\n                  console.log(\">>>read the exposure info from database:\", exposureInfo);\n\n                  if (cInfo) {\n                    if (cInfo.name.length > 0) {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.exposureName = cInfo.name;\n                    } else {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.exposureName = \"\";\n                    }\n\n                    chrome.storage.local.set(cInfo, function () {\n                      console.log(\"exposureInfo is: \", cInfo);\n                    });\n                  } else {\n                    //error for exposureInfo\n                    console.log(\"Exposure Name does not exist in Database\");\n                  }\n                });\n              }\n\n              if (request.todo == \"saveExposure\") {\n                console.log(\"write exposure info\");\n                exposureID = request._id;\n\n                if (request.exposureName.trim().length > 0) {\n                  db.writeExposure(request);\n                }\n              } // Listing\n\n\n              if (request.todo == \"searchListing\") {\n                requestFrom = request.from;\n                delete request.from;\n                listingInfo = request;\n                db.readListing(listingInfo, function (cInfo) {\n                  console.log(\">>>read the listing info from database:\", listingInfo);\n\n                  if (cInfo) {\n                    if (cInfo.name.length > 0) {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.listingName = cInfo.name;\n                    } else {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.listingName = \"\";\n                    }\n\n                    chrome.storage.local.set(cInfo, function () {\n                      console.log(\"listingInfo is: \", cInfo);\n                    });\n                  } else {\n                    //error for listingInfo\n                    console.log(\"Listing Name does not exist in Database\");\n                  }\n                });\n              }\n\n              if (request.todo == \"saveListing\") {\n                console.log(\"write listing info\");\n                listingID = request._id;\n\n                if (request.listingName.trim().length > 0) {\n                  db.writeListing(request);\n                }\n              } // Showing Info\n\n\n              if (request.todo == \"searchShowing\") {\n                requestFrom = request.from;\n                delete request.from;\n                showingInfo = request;\n                db.readShowing(showingInfo, function (cInfo) {\n                  console.log(\">>>read the showing info from database:\", showingInfo);\n\n                  if (cInfo) {\n                    if (cInfo.name.length > 0) {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.name = cInfo.name;\n                    } else {\n                      cInfo.from += \"-\" + requestFrom;\n                      cInfo.name = \"\";\n                    }\n\n                    chrome.storage.local.set(cInfo, function () {\n                      console.log(\"showingInfo is: \", cInfo);\n                    });\n                  } else {\n                    //error for listingInfo\n                    console.log(\"Showing Name does not exist in Database\");\n                  }\n                });\n              }\n\n              if (request.todo == \"saveShowing\") {\n                console.log(\"write showing info\");\n                showingID = request._id;\n\n                if (request.name.trim().length > 0) {\n                  db.writeShowing(request);\n                }\n              }\n\n              if (request.todo == \"saveStrataPlanSummary\") {\n                //console.log(\">>>I got save Complex info: \");\n                spSummary = request.spSummaryData;\n                db.writeStrataPlanSummary(spSummary);\n                sendResponse(spSummary);\n              }\n\n              if (request.todo == \"updateTopLevelTabMenuItems\") {\n                console.log(\"I got Update Top Level Tab Menu Items Command!\");\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"updateTopLevelTabMenuItems\"\n                  });\n                });\n                sendResponse(\"Update Top Level Tab Menu Items Command sent out!\");\n              }\n\n              if (request.todo == \"readCurTabID\") {\n                console.log(\"New Command: readCurTabID\");\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"readCurTabID\"\n                  });\n                });\n                sendResponse(\"readCurTabID Command sent out!\");\n              }\n\n              if (request.todo == \"syncTabToContent\") {\n                console.log(\"New Command: syncTabToContent\");\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"syncTabToContent\"\n                  });\n                });\n              }\n\n              if (request.todo == \"hideQuickSearch\") {\n                console.log(\"New Command: showQuickSearch\");\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"hideQuickSearch\",\n                    tabID: request.tabID\n                  });\n                });\n              }\n\n              if (request.todo == \"getTabTitle\") {\n                console.log(\"Command: \", request.todo, request.from);\n                result = null;\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"getTabTitle\",\n                    tabID: request.tabID\n                  }, function (response) {\n                    result = response;\n                    console.log(\"getTabTitle response:\", response);\n                    chrome.storage.local.set({\n                      getTabID: result.tabID,\n                      getTabTitle: result.tabTitle,\n                      todo: \"getTabTitle\" + Math.random().toFixed(8),\n                      from: \"EventPage.getTabTitle\"\n                    });\n                    sendResponse(response);\n                  });\n                }); //check(result); //wait for 1 sec, stop eventPage hit the exit point, send out null response\n              }\n\n              if (request.todo == \"addLock\") {\n                //get command from sub content script to add lock to the sub content panel\n                console.log(\"Command: \", request.todo, request.from, request.tabID);\n                _result = null;\n                console.info(\"Chrome Tab ID is: \", chromeTabID);\n                chrome.tabs.query({\n                  active: true,\n                  currentWindow: true\n                }, function (tabs) {\n                  chrome.tabs.sendMessage(tabs[0].id, {\n                    todo: \"addLock\",\n                    tabID: request.tabID\n                  }, function (response) {\n                    _result = response;\n                    console.log(\"addLock response:\", response); // chrome.storage.local.set(\n                    // \t{getTabID:result.tabID,\n                    // \tgetTabTitle:result.tabTitle,\n                    // \ttodo: 'getTabTitle'+Math.random().toFixed(8),\n                    // \tfrom: 'EventPage.getTabTitle'});\n\n                    sendResponse(response);\n                  });\n                });\n              } // \"https://pidrealty.local/wp-content/themes/pidHomes-PhaseI/db/dbAddSubjectProperty.php\"\n\n\n              if (request.todo == \"saveSubjectInfo\") {\n                subjectInfo = request;\n                ajax_url = request.ajax_url;\n                $.ajax({\n                  url: ajax_url,\n                  method: \"post\",\n                  data: subjectInfo,\n                  success: function success(res) {\n                    console.log(\"res::\", JSON.stringify(res));\n                  }\n                });\n              }\n\n              if (request.todo == \"saveCMAInfo\") {\n                cmaInfo = request;\n                _ajax_url = request.ajax_url;\n                $.ajax({\n                  url: _ajax_url,\n                  method: \"post\",\n                  data: cmaInfo,\n                  success: function success(res) {\n                    console.log(\"res::\", JSON.stringify(res));\n                  }\n                });\n              } // sync community names to pidhomes.ca & cn.pidhomes.ca\n\n\n              if (request.todo == \"UpdateCommunityInfoToWP\") {\n                listingInfo = {\n                  listingInfo: JSON.stringify(request.listings)\n                };\n                _ajax_url2 = request.ajax_url;\n                $.ajax({\n                  url: _ajax_url2,\n                  method: \"post\",\n                  data: listingInfo,\n                  success: function success(res) {\n                    console.log(\"res::\", JSON.stringify(res));\n\n                    if (res.indexOf(\"sync RPS community names done:\") > -1) {\n                      sendResponse(\"Page Update Done\");\n                    } else {\n                      sendResponse(\"Page Update Failed\");\n                    }\n                  }\n                });\n              }\n\n              if (request.todo == \"saveTableInfo\") {\n                mlsTable = JSON.parse(request.table);\n                sendResponse(\"Table Saved!\");\n              }\n\n              if (request.todo == \"readMLSTableInfo\") {\n                // sendResponse(mlsTable);\n                mlsNo = request.mlsNo;\n                _listingInfo = []; // search tax value\n\n                mlsTable.forEach(function (row) {\n                  if (row[\"ML #\"] == mlsNo) {\n                    _listingInfo = row;\n                  }\n                });\n                sendResponse(_listingInfo);\n              }\n\n              return _context.abrupt(\"return\", true);\n\n            case 71:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[8, 26], [13, 21], [37, 44]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }()); //End of Main Function\n})(); // OBSOLETE CODES ////////////////////////////////////\n// tax search callback version:\n// try {\n//   chrome.storage.local.get([\"PID\", \"taxYear\"], function (result) {\n//     //check database, if assess exist, send it back\n//     //console.log(\">>>PID is: \", result.PID);\n//     taxYear = result.taxYear; // 纳税年份有调用程序, 设定在local storage中\n//     var taxID = result.PID + \"-\" + taxYear;\n//     var requester = request.from;\n//     db.readAssess(taxID, function (assess) {\n//       //console.log(\">>>read from , assess is: \", assess)\n//       //读取地税/评估数据\n//       if (!assess._id) {\n//         // 如果数据库中没有该年的地税/评估数据, 则发送请求去地税查询程序\n//         //other wise , send out tax research command:\n//         try {\n//           console.info(\"Chrome Tab ID is: \", chromeTabID);\n//           // 从后端向前端发送请求, 需要使用chrome.tabs.sendmessage()\n//           // TODO 计划改为 async/await\n//           chrome.windows.getCurrent((w) => {\n//             chrome.tabs.query(\n//               {\n//                 active: true,\n//                 windowId: w.id,\n//               },\n//               function (tabs) {\n//                 console.warn(\"taxSearch get chrome tabs:\", tabs);\n//                 if (tabs.length > 0) {\n//                   chrome.tabs.sendMessage(tabs[0].id, {\n//                     todo: \"taxSearchFor\" + requester,\n//                   });\n//                 } else {\n//                   if (\n//                     String(assess.from).indexOf(\n//                       \"taxSearchFor\" + requester\n//                     ) < 0\n//                   ) {\n//                     assess.from =\n//                       assess.from + \"-taxSearchFor\" + requester;\n//                   }\n//                   assess.from += \"-TaxSearchFailed\";\n//                   // 发送数据, 是否引发前端程序不需要的动作??\n//                   chrome.storage.local.set(assess);\n//                 }\n//               }\n//             );\n//           });\n//         } catch (err) {\n//           console.error(\"taxSearch Errors: \", err);\n//         }\n//       } else {\n//         // 在CouchDB中查询到地税/评估数据\n//         // CouchDB中的数据如果是没有用的空记录, 就需要重新查询\n//         if (String(assess.bcaSearch).indexOf(\"failed\") > -1) {\n//           if (String(assess.addedDate).indexOf($today) > -1) {\n//             // 如果今天已经查过了, 就不要再重复查询了. 因为Paragon不会这么快有更新.\n//             assess.from =\n//               assess.from + \"-TaxSearchFailed-taxSearchFor\" + requester;\n//           } else {\n//             //Re-Search the tax Data EveryDay\n//             // 如果是过去曾经查询过, 现在可以再试一下\n//             // 同样还是发送查询请求到前端\n//             try {\n//               console.info(\"Chrome Tab ID is: \", chromeTabID);\n//               chrome.windows.getCurrent((w) => {\n//                 chrome.tabs.query(\n//                   {\n//                     active: true,\n//                     windowId: w.id,\n//                   },\n//                   function (tabs) {\n//                     console.warn(\"taxSearch get chrome tabs:\", tabs);\n//                     if (tabs.length > 0) {\n//                       // 向前端地税/评估查询程序发出服务请求\n//                       chrome.tabs.sendMessage(tabs[0].id, {\n//                         todo: \"taxSearchFor\" + requester,\n//                       });\n//                     } else {\n//                       if (\n//                         String(assess.from).indexOf(\n//                           \"taxSearchFor\" + requester\n//                         ) < 0\n//                       ) {\n//                         assess.from =\n//                           assess.from + \"-taxSearchFor\" + requester;\n//                       }\n//                       assess.from += \"-TaxSearchFailed\";\n//                       chrome.storage.local.set(assess);\n//                     }\n//                   }\n//                 );\n//               });\n//             } catch (err) {\n//               console.error(\"taxSearch Errors: \", err);\n//             }\n//           }\n//         } else if (\n//           String(assess.from).indexOf(\"taxSearchFor\" + requester) < 0\n//         ) {\n//           assess.from = assess.from + \"-taxSearchFor\" + requester;\n//         }\n//         // 发送地税/评估数据包\n//         chrome.storage.local.set(assess);\n//       }\n//     });\n//   });\n//   sendResponse(\">>>tax search has been processed in EventPage: \");\n// } catch (err) {\n//   sendResponse(\">>>tax search gets errors in EventPage: \");\n// }\n\n//# sourceURL=webpack:///./app/background/eventPage.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/***/ (function(module, exports) {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(\"./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js\");\n\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/regenerator/index.js?");

/***/ })

/******/ });